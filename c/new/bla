#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <netdb.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <unistd.h>

int main() {
	int sockfd, clientfd;
	struct addrinfo hints, *res;
	struct sockaddr_storage client_addr;

	socklen_t client_size = sizeof(client_addr);

	memset(&hints, 0, sizeof(hints));
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_flags = AI_PASSIVE;

	if (getaddrinfo(NULL, "1234", &hints, &res) != 0) {
		perror("getaddrinfo error");
		close(sockfd);
		freeaddrinfo(res);
		return EXIT_FAILURE;
	}

	if ((sockfd = socket(res->ai_family, res->ai_socktype, 0)) < 0) {
		perror("socket error");
		close(sockfd);
		freeaddrinfo(res);
		return EXIT_FAILURE;
	}


	if (bind(sockfd, res->ai_addr, res->ai_addrlen) < 0) {
		perror("bind error");
		close(sockfd);
		freeaddrinfo(res);
		return EXIT_FAILURE;
	}

	char hostname[1024];
	if (gethostname(hostname, sizeof(hostname)) < 0) {
		perror("gethostname error");
		close(sockfd);
		freeaddrinfo(res);
		return EXIT_FAILURE;
	}
	printf("Now listening on server: %s\n\n", hostname);


	while(listen(sockfd, 1) >= 0) {
		if ((clientfd = accept(sockfd, (struct sockaddr *)&client_addr, &client_size)) < 0) {
			perror("accept error");
			close(clientfd);
			close(sockfd);
			freeaddrinfo(res);
			return EXIT_FAILURE;
		}

		//struct sockaddr_in c;
		//socklen_t c_size = sizeof(c);
		getpeername(clientfd, (struct sockaddr *)&client_addr, &client_size);
		close(clientfd);
	}

	close(sockfd);
	freeaddrinfo(res);

	return EXIT_SUCCESS;
}
